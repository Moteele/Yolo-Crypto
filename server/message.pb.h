// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKdfKeysFieldNumber = 4,
    kTextContentFieldNumber = 3,
    kSenIdFieldNumber = 1,
    kRecIdFieldNumber = 2,
  };
  // repeated string kdfKeys = 4;
  int kdfkeys_size() const;
  private:
  int _internal_kdfkeys_size() const;
  public:
  void clear_kdfkeys();
  const std::string& kdfkeys(int index) const;
  std::string* mutable_kdfkeys(int index);
  void set_kdfkeys(int index, const std::string& value);
  void set_kdfkeys(int index, std::string&& value);
  void set_kdfkeys(int index, const char* value);
  void set_kdfkeys(int index, const char* value, size_t size);
  std::string* add_kdfkeys();
  void add_kdfkeys(const std::string& value);
  void add_kdfkeys(std::string&& value);
  void add_kdfkeys(const char* value);
  void add_kdfkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& kdfkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_kdfkeys();
  private:
  const std::string& _internal_kdfkeys(int index) const;
  std::string* _internal_add_kdfkeys();
  public:

  // required string textContent = 3;
  bool has_textcontent() const;
  private:
  bool _internal_has_textcontent() const;
  public:
  void clear_textcontent();
  const std::string& textcontent() const;
  void set_textcontent(const std::string& value);
  void set_textcontent(std::string&& value);
  void set_textcontent(const char* value);
  void set_textcontent(const char* value, size_t size);
  std::string* mutable_textcontent();
  std::string* release_textcontent();
  void set_allocated_textcontent(std::string* textcontent);
  private:
  const std::string& _internal_textcontent() const;
  void _internal_set_textcontent(const std::string& value);
  std::string* _internal_mutable_textcontent();
  public:

  // required int32 senId = 1;
  bool has_senid() const;
  private:
  bool _internal_has_senid() const;
  public:
  void clear_senid();
  ::PROTOBUF_NAMESPACE_ID::int32 senid() const;
  void set_senid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_senid() const;
  void _internal_set_senid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 recId = 2;
  bool has_recid() const;
  private:
  bool _internal_has_recid() const;
  public:
  void clear_recid();
  ::PROTOBUF_NAMESPACE_ID::int32 recid() const;
  void set_recid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recid() const;
  void _internal_set_recid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> kdfkeys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr textcontent_;
  ::PROTOBUF_NAMESPACE_ID::int32 senid_;
  ::PROTOBUF_NAMESPACE_ID::int32 recid_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// required int32 senId = 1;
inline bool Message::_internal_has_senid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message::has_senid() const {
  return _internal_has_senid();
}
inline void Message::clear_senid() {
  senid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::_internal_senid() const {
  return senid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::senid() const {
  // @@protoc_insertion_point(field_get:Message.senId)
  return _internal_senid();
}
inline void Message::_internal_set_senid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  senid_ = value;
}
inline void Message::set_senid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_senid(value);
  // @@protoc_insertion_point(field_set:Message.senId)
}

// required int32 recId = 2;
inline bool Message::_internal_has_recid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message::has_recid() const {
  return _internal_has_recid();
}
inline void Message::clear_recid() {
  recid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::_internal_recid() const {
  return recid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::recid() const {
  // @@protoc_insertion_point(field_get:Message.recId)
  return _internal_recid();
}
inline void Message::_internal_set_recid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  recid_ = value;
}
inline void Message::set_recid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recid(value);
  // @@protoc_insertion_point(field_set:Message.recId)
}

// required string textContent = 3;
inline bool Message::_internal_has_textcontent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message::has_textcontent() const {
  return _internal_has_textcontent();
}
inline void Message::clear_textcontent() {
  textcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message::textcontent() const {
  // @@protoc_insertion_point(field_get:Message.textContent)
  return _internal_textcontent();
}
inline void Message::set_textcontent(const std::string& value) {
  _internal_set_textcontent(value);
  // @@protoc_insertion_point(field_set:Message.textContent)
}
inline std::string* Message::mutable_textcontent() {
  // @@protoc_insertion_point(field_mutable:Message.textContent)
  return _internal_mutable_textcontent();
}
inline const std::string& Message::_internal_textcontent() const {
  return textcontent_.GetNoArena();
}
inline void Message::_internal_set_textcontent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_textcontent(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  textcontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.textContent)
}
inline void Message::set_textcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.textContent)
}
inline void Message::set_textcontent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  textcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.textContent)
}
inline std::string* Message::_internal_mutable_textcontent() {
  _has_bits_[0] |= 0x00000001u;
  return textcontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_textcontent() {
  // @@protoc_insertion_point(field_release:Message.textContent)
  if (!_internal_has_textcontent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return textcontent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_textcontent(std::string* textcontent) {
  if (textcontent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  textcontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), textcontent);
  // @@protoc_insertion_point(field_set_allocated:Message.textContent)
}

// repeated string kdfKeys = 4;
inline int Message::_internal_kdfkeys_size() const {
  return kdfkeys_.size();
}
inline int Message::kdfkeys_size() const {
  return _internal_kdfkeys_size();
}
inline void Message::clear_kdfkeys() {
  kdfkeys_.Clear();
}
inline std::string* Message::add_kdfkeys() {
  // @@protoc_insertion_point(field_add_mutable:Message.kdfKeys)
  return _internal_add_kdfkeys();
}
inline const std::string& Message::_internal_kdfkeys(int index) const {
  return kdfkeys_.Get(index);
}
inline const std::string& Message::kdfkeys(int index) const {
  // @@protoc_insertion_point(field_get:Message.kdfKeys)
  return _internal_kdfkeys(index);
}
inline std::string* Message::mutable_kdfkeys(int index) {
  // @@protoc_insertion_point(field_mutable:Message.kdfKeys)
  return kdfkeys_.Mutable(index);
}
inline void Message::set_kdfkeys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Message.kdfKeys)
  kdfkeys_.Mutable(index)->assign(value);
}
inline void Message::set_kdfkeys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Message.kdfKeys)
  kdfkeys_.Mutable(index)->assign(std::move(value));
}
inline void Message::set_kdfkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  kdfkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Message.kdfKeys)
}
inline void Message::set_kdfkeys(int index, const char* value, size_t size) {
  kdfkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Message.kdfKeys)
}
inline std::string* Message::_internal_add_kdfkeys() {
  return kdfkeys_.Add();
}
inline void Message::add_kdfkeys(const std::string& value) {
  kdfkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Message.kdfKeys)
}
inline void Message::add_kdfkeys(std::string&& value) {
  kdfkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Message.kdfKeys)
}
inline void Message::add_kdfkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  kdfkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Message.kdfKeys)
}
inline void Message::add_kdfkeys(const char* value, size_t size) {
  kdfkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Message.kdfKeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Message::kdfkeys() const {
  // @@protoc_insertion_point(field_list:Message.kdfKeys)
  return kdfkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Message::mutable_kdfkeys() {
  // @@protoc_insertion_point(field_mutable_list:Message.kdfKeys)
  return &kdfkeys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
