// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userAcc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userAcc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userAcc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userAcc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userAcc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userAcc_2eproto;
class userAcc;
class userAccDefaultTypeInternal;
extern userAccDefaultTypeInternal _userAcc_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::userAcc* Arena::CreateMaybeMessage<::userAcc>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class userAcc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userAcc) */ {
 public:
  userAcc();
  virtual ~userAcc();

  userAcc(const userAcc& from);
  userAcc(userAcc&& from) noexcept
    : userAcc() {
    *this = ::std::move(from);
  }

  inline userAcc& operator=(const userAcc& from) {
    CopyFrom(from);
    return *this;
  }
  inline userAcc& operator=(userAcc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const userAcc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const userAcc* internal_default_instance() {
    return reinterpret_cast<const userAcc*>(
               &_userAcc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(userAcc& a, userAcc& b) {
    a.Swap(&b);
  }
  inline void Swap(userAcc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline userAcc* New() const final {
    return CreateMaybeMessage<userAcc>(nullptr);
  }

  userAcc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<userAcc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const userAcc& from);
  void MergeFrom(const userAcc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(userAcc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userAcc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userAcc_2eproto);
    return ::descriptor_table_userAcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 5,
    kOneTimePublicFieldNumber = 11,
    kOneTimePrivateFieldNumber = 12,
    kNameFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kPwdhashFieldNumber = 4,
    kPublicIkFieldNumber = 6,
    kPrivateIkFieldNumber = 7,
    kPublicPkFieldNumber = 8,
    kPrivatePkFieldNumber = 9,
    kSignedPkFieldNumber = 10,
    kIdFieldNumber = 1,
  };
  // repeated string messages = 5;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  const std::string& messages(int index) const;
  std::string* mutable_messages(int index);
  void set_messages(int index, const std::string& value);
  void set_messages(int index, std::string&& value);
  void set_messages(int index, const char* value);
  void set_messages(int index, const char* value, size_t size);
  std::string* add_messages();
  void add_messages(const std::string& value);
  void add_messages(std::string&& value);
  void add_messages(const char* value);
  void add_messages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messages();
  private:
  const std::string& _internal_messages(int index) const;
  std::string* _internal_add_messages();
  public:

  // repeated string oneTimePublic = 11;
  int onetimepublic_size() const;
  private:
  int _internal_onetimepublic_size() const;
  public:
  void clear_onetimepublic();
  const std::string& onetimepublic(int index) const;
  std::string* mutable_onetimepublic(int index);
  void set_onetimepublic(int index, const std::string& value);
  void set_onetimepublic(int index, std::string&& value);
  void set_onetimepublic(int index, const char* value);
  void set_onetimepublic(int index, const char* value, size_t size);
  std::string* add_onetimepublic();
  void add_onetimepublic(const std::string& value);
  void add_onetimepublic(std::string&& value);
  void add_onetimepublic(const char* value);
  void add_onetimepublic(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& onetimepublic() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_onetimepublic();
  private:
  const std::string& _internal_onetimepublic(int index) const;
  std::string* _internal_add_onetimepublic();
  public:

  // repeated string oneTimePrivate = 12;
  int onetimeprivate_size() const;
  private:
  int _internal_onetimeprivate_size() const;
  public:
  void clear_onetimeprivate();
  const std::string& onetimeprivate(int index) const;
  std::string* mutable_onetimeprivate(int index);
  void set_onetimeprivate(int index, const std::string& value);
  void set_onetimeprivate(int index, std::string&& value);
  void set_onetimeprivate(int index, const char* value);
  void set_onetimeprivate(int index, const char* value, size_t size);
  std::string* add_onetimeprivate();
  void add_onetimeprivate(const std::string& value);
  void add_onetimeprivate(std::string&& value);
  void add_onetimeprivate(const char* value);
  void add_onetimeprivate(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& onetimeprivate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_onetimeprivate();
  private:
  const std::string& _internal_onetimeprivate(int index) const;
  std::string* _internal_add_onetimeprivate();
  public:

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string displayName = 3;
  bool has_displayname() const;
  private:
  bool _internal_has_displayname() const;
  public:
  void clear_displayname();
  const std::string& displayname() const;
  void set_displayname(const std::string& value);
  void set_displayname(std::string&& value);
  void set_displayname(const char* value);
  void set_displayname(const char* value, size_t size);
  std::string* mutable_displayname();
  std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // required string pwdhash = 4;
  bool has_pwdhash() const;
  private:
  bool _internal_has_pwdhash() const;
  public:
  void clear_pwdhash();
  const std::string& pwdhash() const;
  void set_pwdhash(const std::string& value);
  void set_pwdhash(std::string&& value);
  void set_pwdhash(const char* value);
  void set_pwdhash(const char* value, size_t size);
  std::string* mutable_pwdhash();
  std::string* release_pwdhash();
  void set_allocated_pwdhash(std::string* pwdhash);
  private:
  const std::string& _internal_pwdhash() const;
  void _internal_set_pwdhash(const std::string& value);
  std::string* _internal_mutable_pwdhash();
  public:

  // optional string publicIk = 6;
  bool has_publicik() const;
  private:
  bool _internal_has_publicik() const;
  public:
  void clear_publicik();
  const std::string& publicik() const;
  void set_publicik(const std::string& value);
  void set_publicik(std::string&& value);
  void set_publicik(const char* value);
  void set_publicik(const char* value, size_t size);
  std::string* mutable_publicik();
  std::string* release_publicik();
  void set_allocated_publicik(std::string* publicik);
  private:
  const std::string& _internal_publicik() const;
  void _internal_set_publicik(const std::string& value);
  std::string* _internal_mutable_publicik();
  public:

  // optional string privateIk = 7;
  bool has_privateik() const;
  private:
  bool _internal_has_privateik() const;
  public:
  void clear_privateik();
  const std::string& privateik() const;
  void set_privateik(const std::string& value);
  void set_privateik(std::string&& value);
  void set_privateik(const char* value);
  void set_privateik(const char* value, size_t size);
  std::string* mutable_privateik();
  std::string* release_privateik();
  void set_allocated_privateik(std::string* privateik);
  private:
  const std::string& _internal_privateik() const;
  void _internal_set_privateik(const std::string& value);
  std::string* _internal_mutable_privateik();
  public:

  // optional string publicPk = 8;
  bool has_publicpk() const;
  private:
  bool _internal_has_publicpk() const;
  public:
  void clear_publicpk();
  const std::string& publicpk() const;
  void set_publicpk(const std::string& value);
  void set_publicpk(std::string&& value);
  void set_publicpk(const char* value);
  void set_publicpk(const char* value, size_t size);
  std::string* mutable_publicpk();
  std::string* release_publicpk();
  void set_allocated_publicpk(std::string* publicpk);
  private:
  const std::string& _internal_publicpk() const;
  void _internal_set_publicpk(const std::string& value);
  std::string* _internal_mutable_publicpk();
  public:

  // optional string privatePk = 9;
  bool has_privatepk() const;
  private:
  bool _internal_has_privatepk() const;
  public:
  void clear_privatepk();
  const std::string& privatepk() const;
  void set_privatepk(const std::string& value);
  void set_privatepk(std::string&& value);
  void set_privatepk(const char* value);
  void set_privatepk(const char* value, size_t size);
  std::string* mutable_privatepk();
  std::string* release_privatepk();
  void set_allocated_privatepk(std::string* privatepk);
  private:
  const std::string& _internal_privatepk() const;
  void _internal_set_privatepk(const std::string& value);
  std::string* _internal_mutable_privatepk();
  public:

  // optional string signedPk = 10;
  bool has_signedpk() const;
  private:
  bool _internal_has_signedpk() const;
  public:
  void clear_signedpk();
  const std::string& signedpk() const;
  void set_signedpk(const std::string& value);
  void set_signedpk(std::string&& value);
  void set_signedpk(const char* value);
  void set_signedpk(const char* value, size_t size);
  std::string* mutable_signedpk();
  std::string* release_signedpk();
  void set_allocated_signedpk(std::string* signedpk);
  private:
  const std::string& _internal_signedpk() const;
  void _internal_set_signedpk(const std::string& value);
  std::string* _internal_mutable_signedpk();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:userAcc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> onetimepublic_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> onetimeprivate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwdhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicik_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privateik_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicpk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privatepk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signedpk_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_userAcc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// userAcc

// required int32 id = 1;
inline bool userAcc::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool userAcc::has_id() const {
  return _internal_has_id();
}
inline void userAcc::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 userAcc::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 userAcc::id() const {
  // @@protoc_insertion_point(field_get:userAcc.id)
  return _internal_id();
}
inline void userAcc::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
}
inline void userAcc::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:userAcc.id)
}

// required string name = 2;
inline bool userAcc::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool userAcc::has_name() const {
  return _internal_has_name();
}
inline void userAcc::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& userAcc::name() const {
  // @@protoc_insertion_point(field_get:userAcc.name)
  return _internal_name();
}
inline void userAcc::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:userAcc.name)
}
inline std::string* userAcc::mutable_name() {
  // @@protoc_insertion_point(field_mutable:userAcc.name)
  return _internal_mutable_name();
}
inline const std::string& userAcc::_internal_name() const {
  return name_.GetNoArena();
}
inline void userAcc::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void userAcc::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userAcc.name)
}
inline void userAcc::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userAcc.name)
}
inline void userAcc::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userAcc.name)
}
inline std::string* userAcc::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* userAcc::release_name() {
  // @@protoc_insertion_point(field_release:userAcc.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void userAcc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:userAcc.name)
}

// optional string displayName = 3;
inline bool userAcc::_internal_has_displayname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool userAcc::has_displayname() const {
  return _internal_has_displayname();
}
inline void userAcc::clear_displayname() {
  displayname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& userAcc::displayname() const {
  // @@protoc_insertion_point(field_get:userAcc.displayName)
  return _internal_displayname();
}
inline void userAcc::set_displayname(const std::string& value) {
  _internal_set_displayname(value);
  // @@protoc_insertion_point(field_set:userAcc.displayName)
}
inline std::string* userAcc::mutable_displayname() {
  // @@protoc_insertion_point(field_mutable:userAcc.displayName)
  return _internal_mutable_displayname();
}
inline const std::string& userAcc::_internal_displayname() const {
  return displayname_.GetNoArena();
}
inline void userAcc::_internal_set_displayname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void userAcc::set_displayname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userAcc.displayName)
}
inline void userAcc::set_displayname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  displayname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userAcc.displayName)
}
inline void userAcc::set_displayname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  displayname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userAcc.displayName)
}
inline std::string* userAcc::_internal_mutable_displayname() {
  _has_bits_[0] |= 0x00000002u;
  return displayname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* userAcc::release_displayname() {
  // @@protoc_insertion_point(field_release:userAcc.displayName)
  if (!_internal_has_displayname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return displayname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void userAcc::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  displayname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayname);
  // @@protoc_insertion_point(field_set_allocated:userAcc.displayName)
}

// required string pwdhash = 4;
inline bool userAcc::_internal_has_pwdhash() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool userAcc::has_pwdhash() const {
  return _internal_has_pwdhash();
}
inline void userAcc::clear_pwdhash() {
  pwdhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& userAcc::pwdhash() const {
  // @@protoc_insertion_point(field_get:userAcc.pwdhash)
  return _internal_pwdhash();
}
inline void userAcc::set_pwdhash(const std::string& value) {
  _internal_set_pwdhash(value);
  // @@protoc_insertion_point(field_set:userAcc.pwdhash)
}
inline std::string* userAcc::mutable_pwdhash() {
  // @@protoc_insertion_point(field_mutable:userAcc.pwdhash)
  return _internal_mutable_pwdhash();
}
inline const std::string& userAcc::_internal_pwdhash() const {
  return pwdhash_.GetNoArena();
}
inline void userAcc::_internal_set_pwdhash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pwdhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void userAcc::set_pwdhash(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pwdhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userAcc.pwdhash)
}
inline void userAcc::set_pwdhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pwdhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userAcc.pwdhash)
}
inline void userAcc::set_pwdhash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pwdhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userAcc.pwdhash)
}
inline std::string* userAcc::_internal_mutable_pwdhash() {
  _has_bits_[0] |= 0x00000004u;
  return pwdhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* userAcc::release_pwdhash() {
  // @@protoc_insertion_point(field_release:userAcc.pwdhash)
  if (!_internal_has_pwdhash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pwdhash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void userAcc::set_allocated_pwdhash(std::string* pwdhash) {
  if (pwdhash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pwdhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwdhash);
  // @@protoc_insertion_point(field_set_allocated:userAcc.pwdhash)
}

// repeated string messages = 5;
inline int userAcc::_internal_messages_size() const {
  return messages_.size();
}
inline int userAcc::messages_size() const {
  return _internal_messages_size();
}
inline void userAcc::clear_messages() {
  messages_.Clear();
}
inline std::string* userAcc::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:userAcc.messages)
  return _internal_add_messages();
}
inline const std::string& userAcc::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const std::string& userAcc::messages(int index) const {
  // @@protoc_insertion_point(field_get:userAcc.messages)
  return _internal_messages(index);
}
inline std::string* userAcc::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:userAcc.messages)
  return messages_.Mutable(index);
}
inline void userAcc::set_messages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:userAcc.messages)
  messages_.Mutable(index)->assign(value);
}
inline void userAcc::set_messages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:userAcc.messages)
  messages_.Mutable(index)->assign(std::move(value));
}
inline void userAcc::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userAcc.messages)
}
inline void userAcc::set_messages(int index, const char* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userAcc.messages)
}
inline std::string* userAcc::_internal_add_messages() {
  return messages_.Add();
}
inline void userAcc::add_messages(const std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userAcc.messages)
}
inline void userAcc::add_messages(std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:userAcc.messages)
}
inline void userAcc::add_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userAcc.messages)
}
inline void userAcc::add_messages(const char* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userAcc.messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
userAcc::messages() const {
  // @@protoc_insertion_point(field_list:userAcc.messages)
  return messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
userAcc::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:userAcc.messages)
  return &messages_;
}

// optional string publicIk = 6;
inline bool userAcc::_internal_has_publicik() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool userAcc::has_publicik() const {
  return _internal_has_publicik();
}
inline void userAcc::clear_publicik() {
  publicik_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& userAcc::publicik() const {
  // @@protoc_insertion_point(field_get:userAcc.publicIk)
  return _internal_publicik();
}
inline void userAcc::set_publicik(const std::string& value) {
  _internal_set_publicik(value);
  // @@protoc_insertion_point(field_set:userAcc.publicIk)
}
inline std::string* userAcc::mutable_publicik() {
  // @@protoc_insertion_point(field_mutable:userAcc.publicIk)
  return _internal_mutable_publicik();
}
inline const std::string& userAcc::_internal_publicik() const {
  return publicik_.GetNoArena();
}
inline void userAcc::_internal_set_publicik(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  publicik_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void userAcc::set_publicik(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  publicik_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userAcc.publicIk)
}
inline void userAcc::set_publicik(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  publicik_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userAcc.publicIk)
}
inline void userAcc::set_publicik(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  publicik_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userAcc.publicIk)
}
inline std::string* userAcc::_internal_mutable_publicik() {
  _has_bits_[0] |= 0x00000008u;
  return publicik_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* userAcc::release_publicik() {
  // @@protoc_insertion_point(field_release:userAcc.publicIk)
  if (!_internal_has_publicik()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return publicik_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void userAcc::set_allocated_publicik(std::string* publicik) {
  if (publicik != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  publicik_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicik);
  // @@protoc_insertion_point(field_set_allocated:userAcc.publicIk)
}

// optional string privateIk = 7;
inline bool userAcc::_internal_has_privateik() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool userAcc::has_privateik() const {
  return _internal_has_privateik();
}
inline void userAcc::clear_privateik() {
  privateik_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& userAcc::privateik() const {
  // @@protoc_insertion_point(field_get:userAcc.privateIk)
  return _internal_privateik();
}
inline void userAcc::set_privateik(const std::string& value) {
  _internal_set_privateik(value);
  // @@protoc_insertion_point(field_set:userAcc.privateIk)
}
inline std::string* userAcc::mutable_privateik() {
  // @@protoc_insertion_point(field_mutable:userAcc.privateIk)
  return _internal_mutable_privateik();
}
inline const std::string& userAcc::_internal_privateik() const {
  return privateik_.GetNoArena();
}
inline void userAcc::_internal_set_privateik(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  privateik_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void userAcc::set_privateik(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  privateik_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userAcc.privateIk)
}
inline void userAcc::set_privateik(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  privateik_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userAcc.privateIk)
}
inline void userAcc::set_privateik(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  privateik_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userAcc.privateIk)
}
inline std::string* userAcc::_internal_mutable_privateik() {
  _has_bits_[0] |= 0x00000010u;
  return privateik_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* userAcc::release_privateik() {
  // @@protoc_insertion_point(field_release:userAcc.privateIk)
  if (!_internal_has_privateik()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return privateik_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void userAcc::set_allocated_privateik(std::string* privateik) {
  if (privateik != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  privateik_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privateik);
  // @@protoc_insertion_point(field_set_allocated:userAcc.privateIk)
}

// optional string publicPk = 8;
inline bool userAcc::_internal_has_publicpk() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool userAcc::has_publicpk() const {
  return _internal_has_publicpk();
}
inline void userAcc::clear_publicpk() {
  publicpk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& userAcc::publicpk() const {
  // @@protoc_insertion_point(field_get:userAcc.publicPk)
  return _internal_publicpk();
}
inline void userAcc::set_publicpk(const std::string& value) {
  _internal_set_publicpk(value);
  // @@protoc_insertion_point(field_set:userAcc.publicPk)
}
inline std::string* userAcc::mutable_publicpk() {
  // @@protoc_insertion_point(field_mutable:userAcc.publicPk)
  return _internal_mutable_publicpk();
}
inline const std::string& userAcc::_internal_publicpk() const {
  return publicpk_.GetNoArena();
}
inline void userAcc::_internal_set_publicpk(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  publicpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void userAcc::set_publicpk(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  publicpk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userAcc.publicPk)
}
inline void userAcc::set_publicpk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  publicpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userAcc.publicPk)
}
inline void userAcc::set_publicpk(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  publicpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userAcc.publicPk)
}
inline std::string* userAcc::_internal_mutable_publicpk() {
  _has_bits_[0] |= 0x00000020u;
  return publicpk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* userAcc::release_publicpk() {
  // @@protoc_insertion_point(field_release:userAcc.publicPk)
  if (!_internal_has_publicpk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return publicpk_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void userAcc::set_allocated_publicpk(std::string* publicpk) {
  if (publicpk != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  publicpk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicpk);
  // @@protoc_insertion_point(field_set_allocated:userAcc.publicPk)
}

// optional string privatePk = 9;
inline bool userAcc::_internal_has_privatepk() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool userAcc::has_privatepk() const {
  return _internal_has_privatepk();
}
inline void userAcc::clear_privatepk() {
  privatepk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& userAcc::privatepk() const {
  // @@protoc_insertion_point(field_get:userAcc.privatePk)
  return _internal_privatepk();
}
inline void userAcc::set_privatepk(const std::string& value) {
  _internal_set_privatepk(value);
  // @@protoc_insertion_point(field_set:userAcc.privatePk)
}
inline std::string* userAcc::mutable_privatepk() {
  // @@protoc_insertion_point(field_mutable:userAcc.privatePk)
  return _internal_mutable_privatepk();
}
inline const std::string& userAcc::_internal_privatepk() const {
  return privatepk_.GetNoArena();
}
inline void userAcc::_internal_set_privatepk(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  privatepk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void userAcc::set_privatepk(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  privatepk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userAcc.privatePk)
}
inline void userAcc::set_privatepk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  privatepk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userAcc.privatePk)
}
inline void userAcc::set_privatepk(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  privatepk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userAcc.privatePk)
}
inline std::string* userAcc::_internal_mutable_privatepk() {
  _has_bits_[0] |= 0x00000040u;
  return privatepk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* userAcc::release_privatepk() {
  // @@protoc_insertion_point(field_release:userAcc.privatePk)
  if (!_internal_has_privatepk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return privatepk_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void userAcc::set_allocated_privatepk(std::string* privatepk) {
  if (privatepk != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  privatepk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privatepk);
  // @@protoc_insertion_point(field_set_allocated:userAcc.privatePk)
}

// optional string signedPk = 10;
inline bool userAcc::_internal_has_signedpk() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool userAcc::has_signedpk() const {
  return _internal_has_signedpk();
}
inline void userAcc::clear_signedpk() {
  signedpk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& userAcc::signedpk() const {
  // @@protoc_insertion_point(field_get:userAcc.signedPk)
  return _internal_signedpk();
}
inline void userAcc::set_signedpk(const std::string& value) {
  _internal_set_signedpk(value);
  // @@protoc_insertion_point(field_set:userAcc.signedPk)
}
inline std::string* userAcc::mutable_signedpk() {
  // @@protoc_insertion_point(field_mutable:userAcc.signedPk)
  return _internal_mutable_signedpk();
}
inline const std::string& userAcc::_internal_signedpk() const {
  return signedpk_.GetNoArena();
}
inline void userAcc::_internal_set_signedpk(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  signedpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void userAcc::set_signedpk(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  signedpk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userAcc.signedPk)
}
inline void userAcc::set_signedpk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  signedpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userAcc.signedPk)
}
inline void userAcc::set_signedpk(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  signedpk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userAcc.signedPk)
}
inline std::string* userAcc::_internal_mutable_signedpk() {
  _has_bits_[0] |= 0x00000080u;
  return signedpk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* userAcc::release_signedpk() {
  // @@protoc_insertion_point(field_release:userAcc.signedPk)
  if (!_internal_has_signedpk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return signedpk_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void userAcc::set_allocated_signedpk(std::string* signedpk) {
  if (signedpk != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  signedpk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signedpk);
  // @@protoc_insertion_point(field_set_allocated:userAcc.signedPk)
}

// repeated string oneTimePublic = 11;
inline int userAcc::_internal_onetimepublic_size() const {
  return onetimepublic_.size();
}
inline int userAcc::onetimepublic_size() const {
  return _internal_onetimepublic_size();
}
inline void userAcc::clear_onetimepublic() {
  onetimepublic_.Clear();
}
inline std::string* userAcc::add_onetimepublic() {
  // @@protoc_insertion_point(field_add_mutable:userAcc.oneTimePublic)
  return _internal_add_onetimepublic();
}
inline const std::string& userAcc::_internal_onetimepublic(int index) const {
  return onetimepublic_.Get(index);
}
inline const std::string& userAcc::onetimepublic(int index) const {
  // @@protoc_insertion_point(field_get:userAcc.oneTimePublic)
  return _internal_onetimepublic(index);
}
inline std::string* userAcc::mutable_onetimepublic(int index) {
  // @@protoc_insertion_point(field_mutable:userAcc.oneTimePublic)
  return onetimepublic_.Mutable(index);
}
inline void userAcc::set_onetimepublic(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:userAcc.oneTimePublic)
  onetimepublic_.Mutable(index)->assign(value);
}
inline void userAcc::set_onetimepublic(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:userAcc.oneTimePublic)
  onetimepublic_.Mutable(index)->assign(std::move(value));
}
inline void userAcc::set_onetimepublic(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  onetimepublic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userAcc.oneTimePublic)
}
inline void userAcc::set_onetimepublic(int index, const char* value, size_t size) {
  onetimepublic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userAcc.oneTimePublic)
}
inline std::string* userAcc::_internal_add_onetimepublic() {
  return onetimepublic_.Add();
}
inline void userAcc::add_onetimepublic(const std::string& value) {
  onetimepublic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userAcc.oneTimePublic)
}
inline void userAcc::add_onetimepublic(std::string&& value) {
  onetimepublic_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:userAcc.oneTimePublic)
}
inline void userAcc::add_onetimepublic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  onetimepublic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userAcc.oneTimePublic)
}
inline void userAcc::add_onetimepublic(const char* value, size_t size) {
  onetimepublic_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userAcc.oneTimePublic)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
userAcc::onetimepublic() const {
  // @@protoc_insertion_point(field_list:userAcc.oneTimePublic)
  return onetimepublic_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
userAcc::mutable_onetimepublic() {
  // @@protoc_insertion_point(field_mutable_list:userAcc.oneTimePublic)
  return &onetimepublic_;
}

// repeated string oneTimePrivate = 12;
inline int userAcc::_internal_onetimeprivate_size() const {
  return onetimeprivate_.size();
}
inline int userAcc::onetimeprivate_size() const {
  return _internal_onetimeprivate_size();
}
inline void userAcc::clear_onetimeprivate() {
  onetimeprivate_.Clear();
}
inline std::string* userAcc::add_onetimeprivate() {
  // @@protoc_insertion_point(field_add_mutable:userAcc.oneTimePrivate)
  return _internal_add_onetimeprivate();
}
inline const std::string& userAcc::_internal_onetimeprivate(int index) const {
  return onetimeprivate_.Get(index);
}
inline const std::string& userAcc::onetimeprivate(int index) const {
  // @@protoc_insertion_point(field_get:userAcc.oneTimePrivate)
  return _internal_onetimeprivate(index);
}
inline std::string* userAcc::mutable_onetimeprivate(int index) {
  // @@protoc_insertion_point(field_mutable:userAcc.oneTimePrivate)
  return onetimeprivate_.Mutable(index);
}
inline void userAcc::set_onetimeprivate(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:userAcc.oneTimePrivate)
  onetimeprivate_.Mutable(index)->assign(value);
}
inline void userAcc::set_onetimeprivate(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:userAcc.oneTimePrivate)
  onetimeprivate_.Mutable(index)->assign(std::move(value));
}
inline void userAcc::set_onetimeprivate(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  onetimeprivate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userAcc.oneTimePrivate)
}
inline void userAcc::set_onetimeprivate(int index, const char* value, size_t size) {
  onetimeprivate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userAcc.oneTimePrivate)
}
inline std::string* userAcc::_internal_add_onetimeprivate() {
  return onetimeprivate_.Add();
}
inline void userAcc::add_onetimeprivate(const std::string& value) {
  onetimeprivate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userAcc.oneTimePrivate)
}
inline void userAcc::add_onetimeprivate(std::string&& value) {
  onetimeprivate_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:userAcc.oneTimePrivate)
}
inline void userAcc::add_onetimeprivate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  onetimeprivate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userAcc.oneTimePrivate)
}
inline void userAcc::add_onetimeprivate(const char* value, size_t size) {
  onetimeprivate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userAcc.oneTimePrivate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
userAcc::onetimeprivate() const {
  // @@protoc_insertion_point(field_list:userAcc.oneTimePrivate)
  return onetimeprivate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
userAcc::mutable_onetimeprivate() {
  // @@protoc_insertion_point(field_mutable_list:userAcc.oneTimePrivate)
  return &onetimeprivate_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userAcc_2eproto
